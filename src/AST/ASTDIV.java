/* Generated By:JJTree: Do not edit this line. ASTDIV.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package src.AST;

import src.semantic.Symbol;
import src.semantic.Symbol.Type;

public class ASTDIV extends SimpleNode {
    public ASTDIV(int id) {
        super(id);
    }

    public ASTDIV(Program p, int id) {
        super(p, id);
    }

    public Symbol.Type getReturnType() {
        return Symbol.Type.INT;
    }

    public boolean checkSymbolTable() {

        if (getChildren().length != 2) {
            printSemanticError("Not valid DIV operands");
            return false;
        }

        SimpleNode left_child = (SimpleNode) this.jjtGetChild(0);
        SimpleNode right_child = (SimpleNode) this.jjtGetChild(1);

        Symbol.Type lop_type = left_child.getReturnType();

        if (lop_type.equals(Symbol.Type.VOID))
            lop_type = getVarType(left_child.getName());

        if (!lop_type.equals(Symbol.Type.INT)) {
            printSemanticError("Invalid type for left operand");
            return false;
        }

        Symbol.Type rop_type = right_child.getReturnType();

        if (rop_type.equals(Symbol.Type.VOID)) {

            if ((right_child.getId()) == (ProgramTreeConstants.JJTPERIOD))
                rop_type = lop_type;
            else
                rop_type = getVarType(right_child.getName());
        }

        if (!rop_type.equals(Symbol.Type.INT)) {
            printSemanticError("Invalid type for right operand");
            return false;
        }

        return true;
    }

}
/*
 * JavaCC - OriginalChecksum=4d7d13f78d5c33b5a5e76147dd0fffc6 (do not edit this
 * line)
 */
