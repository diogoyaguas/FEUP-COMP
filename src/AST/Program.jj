/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Program.jj */
/*@egen*/options {

  LOOKAHEAD = 1;
               
                      
}

PARSER_BEGIN(Program)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public
class Program/*@bgen(jjtree)*/implements ProgramTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTProgramState jjtree = new JJTProgramState();

/*@egen*/
private static Program myProg;
private static String FILENAME;

public
  static void main(String args[]) throws ParseException {

    if (args.length != 1) {
      System.out.println("Error: Bad command or filename. Syntax: java Program [filename.tpl]");
      System.exit(0);
    }
    FILENAME = args[0];

    if (createInputStream() == false)
      return;

    // myProg = new Program(System.in);
    SimpleNode root = myProg.Program(); // devolve referencia para o n\u00f3 da raiz da \u00e1rvore
    root.dump("");
  }

public
  static boolean createInputStream() {
    File file = new File(FILENAME);

    FileInputStream stream;

    try {
      stream = new FileInputStream(file);
      myProg = new Program(stream);
    } catch (FileNotFoundException e) {
      System.out.println("Error in stream constructor: ");
      System.out.println("Usage: java Yal filePath [-r=<n>] [-o]");
      e.printStackTrace();
      return false;
    }

    return true;
  }
}

PARSER_END(Program)

    JAVACODE void skip_to(int token_kind) {/*@bgen(jjtree) skip_to */
ASTskip_to jjtn000 = new ASTskip_to(JJTSKIP_TO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtn000.jjtSetFirstToken(getToken(1));
try {
/*@egen*/
  ParseException exception = generateParseException();
  System.out.println(exception.toString());

  Token t;
  do {
    t = getNextToken();
  } while (t.kind != token_kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

SKIP : {
  " " | "\r" | "\t" | "\n" | <"//"(~[ "\n", "\r" ]) * ("\n" | "\r" | "\r\n")> |
      <"/*"(~["*"]) * "*"("*" | ~[ "*", "/" ](~["*"]) * "*") * "/">
}

TOKEN : {
  <SEMI_COLON: ";" >
|   <COMMA: "," >
|   <PERIOD: "." >
|   <L_PARENTHESIS: "(" >
|   <R_PARENTHESIS: ")" >
|   <L_CBRACKET: "{" >
|   <R_CBRACKET: "}" >
|   <L_BRACKET: "[" >
|   <R_BRACKET: "]" >
|   <EXCLM_MARK: "!" >

|   <NEW: "new" >
|   <THIS: "this" >
|   <TRUE: "true" >
|   <FALSE: "false" >
|   <LENGTH: "length" >

|   <ADD: "+" >
|   <SUB: "-" >
|   <AND: "&&" >
|   <LESS_THAN: "<" >
|   <MUL: "*" >
|   <DIV:  "/" >

|   <EQUAL: "=" >
|   <IF: "if" >
|   <ELSE: "else" >
|   <WHILE: "while" >

|   <INT: "int" >
|   <STRING: "String" >
|   <BOOLEAN: "boolean" >

|   <RETURN: "return" >
|   <PUBLIC: "public" >
|   <STATIC: "static" >
|   <VOID: "void" >
|   <MAIN: "main" >
|   <EXTENDS: "extends" >
|   <CLASS: "class" >
}

TOKEN : {
  <ID: <LETTER> (<LETTER> | <DIGIT>)* > 
|   <#DIGIT: (["0"-"9"]) >
|   <INTEGER: ((<DIGIT>)+) >
|   <#LETTER: (["a"-"z","A"-"Z", "_"])+ >
|   <OCTAL : "0"(["0"-"7"])+ >
|   <HEXA : "0"["x","X"](["0"-"9","a"-"f","A"-"F"])+ >
|   <BINARY : "0"["b","B"](["0"-"1"])+ >
}

SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Program */
  try {
/*@egen*/
  ClassDecl()<EOF>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ClassDecl()        : {/*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token n;
  String s1;
}
{/*@bgen(jjtree) Class */
  try {
/*@egen*/

  try {
    <CLASS> n = <ID> { jjtn000.name = n.image; }
    (ExtendClass()) ? <L_CBRACKET>
  } catch (ParseException e) {
    System.out.println("CAUGHT CLASS INITIALIZATION DECLARATION");
    skip_to(L_CBRACKET);
  }
  try {
    (VarDecl()) * (<PUBLIC>(MainDecl() | MethodDecl())) * <R_CBRACKET>

  } catch (ParseException e) {
    System.out.println("CAUGHT CLASS BLOCK DECLARATION");
    skip_to(R_CBRACKET);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ExtendClass()          : {/*@bgen(jjtree) Extends */
                                ASTExtends jjtn000 = new ASTExtends(JJTEXTENDS);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
                                jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token n; }
{/*@bgen(jjtree) Extends */
  try {
/*@egen*/

  <EXTENDS> n = <ID>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ { jjtn000.name = n.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void VarDecl()      : {/*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token n1;
  String s1;
}
{/*@bgen(jjtree) Var */
  try {
/*@egen*/
  try {
    s1 = Type() { jjtn000.type = s1; }
    n1 = <ID> { jjtn000.name = n1.image; }
    <SEMI_COLON>
  } catch (ParseException e) {
    System.out.println("CAUGHT VAR DECLARATION");
    skip_to(SEMI_COLON);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void MainDecl()       : {/*@bgen(jjtree) Main */
                          ASTMain jjtn000 = new ASTMain(JJTMAIN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token n2; }
{/*@bgen(jjtree) Main */
  try {
/*@egen*/
  try {
    <STATIC><VOID><MAIN><L_PARENTHESIS><STRING><L_BRACKET><R_BRACKET> n2 =
        <ID> {
      jjtn000.name = n2.image;
    }
    <R_PARENTHESIS> <L_CBRACKET>
  } catch (ParseException e) {
    System.out.println("CAUGHT MAIN INITIALIZATION DECLARATION");
    skip_to(L_CBRACKET);
  }
  try {
    (VarDecl()) * (Statement()) * <R_CBRACKET>
  } catch (ParseException e) {
    System.out.println("CAUGHT MAIN BLOCK DECLARATION");
    skip_to(R_CBRACKET);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void MethodDecl()         : {/*@bgen(jjtree) Method */
  ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token n3, n4;
  String s1;
}
{/*@bgen(jjtree) Method */
  try {
/*@egen*/
  try {
    s1 = Type() { jjtn000.type = s1; }
    n3 = <ID> { jjtn000.name = n3.image; }
    <L_PARENTHESIS> MethodArgs() <R_PARENTHESIS>
  } catch (ParseException e) {
    System.out.println("CAUGHT METHOD DECLARATION");
    skip_to(R_PARENTHESIS);
  }
  try {
    <L_CBRACKET> 
            (VarDecl())* (Statement())* MethodReturn()
        <R_CBRACKET>
  } catch (ParseException e) {
    System.out.println("CAUGHT METHOD BLOCK DECLARATION");
    skip_to(R_CBRACKET);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void MethodArgs()       : {} { (Argument()(<COMMA> Argument()) *) ? }

void Argument()           : {/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t1;
  String s1;
}
{/*@bgen(jjtree) Argument */
  try {
/*@egen*/
  s1 = Type() { jjtn000.type = s1; }
  t1 = <ID>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/ { jjtn000.name = t1.image; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void MethodReturn()         : {/*@bgen(jjtree) RETURN */
                                ASTRETURN jjtn000 = new ASTRETURN(JJTRETURN);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
                                jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t1; }
{/*@bgen(jjtree) RETURN */
  try {
/*@egen*/
  t1 = <RETURN> { jjtn000.value = t1.image; }
  Expression()<SEMI_COLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

String Type()       : { Token t1; }
{

  t1 = <BOOLEAN> { return t1.image; } | (t1=<INT>{
    return t1.image;}(<L_BRACKET> <R_BRACKET>)?)
}

void Statement()       : {} {

  <L_CBRACKET>(Statement()) * <R_CBRACKET> | IfStatement() ElseStatement() |
      try {
    WhileStatement()
  } catch (ParseException e) {
    System.out.println("CAUGHT WHILE DECLARATION");
    skip_to(R_PARENTHESIS);
  }
  | LOOKAHEAD(2) Expression()<SEMI_COLON> | StatementAuxiliar()
}

void IfStatement()     : {/*@bgen(jjtree) IF */
  ASTIF jjtn000 = new ASTIF(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) IF */
  try {
/*@egen*/

  <IF><L_PARENTHESIS> Expression()<R_PARENTHESIS> Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ElseStatement()       : {/*@bgen(jjtree) ELSE */
  ASTELSE jjtn000 = new ASTELSE(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) ELSE */
                                  try {
/*@egen*/ <ELSE> Statement()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte000;
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      throw (ParseException)jjte000;
                                    }
                                    throw (Error)jjte000;
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtn000.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/ }

void WhileStatement()        : {/*@bgen(jjtree) WHILE */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) WHILE */
  try {
/*@egen*/
  <WHILE><L_PARENTHESIS> Expression()<R_PARENTHESIS> Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void StatementAuxiliar()         : {/*@bgen(jjtree) ASSIGN */
                                     ASTASSIGN jjtn000 = new ASTASSIGN(JJTASSIGN);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
                                     jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t1; }
{/*@bgen(jjtree) ASSIGN */
  try {
/*@egen*/ Identifier()<EQUAL> Expression()<SEMI_COLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/ }

void Identifier()             : {/*@bgen(jjtree) Identifier */
                                  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
                                  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t1; }
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t1 = <ID> { jjtn000.node_value = t1.image; }
  (<L_BRACKET> Expression() < R_BRACKET > {
    jjtn000.name = jjtn000.name + "[]";
  }) ?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ArrayAssign()              : {/*@bgen(jjtree) ArrayAssign */
  ASTArrayAssign jjtn000 = new ASTArrayAssign(JJTARRAYASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) ArrayAssign */
                                       try {
/*@egen*/ <L_BRACKET> Expression() <R_BRACKET>/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/ }

void Expression()       : {} { Expression_AddSub() Expression_Aux() }

void Expression_AddSub()       : {} {
  Expression_MulDiv()(LOOKAHEAD(2)(<ADD>/*@bgen(jjtree) #ADD( 2) */
                                         {
                                           ASTADD jjtn001 = new ASTADD(JJTADD);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                           jjtn001.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ Expression_MulDiv()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                             jjtn001.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/         |
                                   <SUB>/*@bgen(jjtree) #SUB( 2) */
                                         {
                                           ASTSUB jjtn002 = new ASTSUB(JJTSUB);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtn002.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ Expression_MulDiv()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte002;
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             throw (ParseException)jjte002;
                                           }
                                           throw (Error)jjte002;
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                             jjtn002.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/        ))
      ?
}

void Expression_MulDiv()       : {} {
  Expression_BinOps()(LOOKAHEAD(2)(<MUL>/*@bgen(jjtree) #MUL( 2) */
                                         {
                                           ASTMUL jjtn001 = new ASTMUL(JJTMUL);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                           jjtn001.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ Expression_BinOps()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                             jjtn001.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/         |
                                   <DIV>/*@bgen(jjtree) #DIV( 2) */
                                         {
                                           ASTDIV jjtn002 = new ASTDIV(JJTDIV);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtn002.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ Expression_BinOps()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte002;
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             throw (ParseException)jjte002;
                                           }
                                           throw (Error)jjte002;
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                             jjtn002.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/        ))
      ?
}

void Expression_BinOps()       : {} {
  Expression_Aux()(LOOKAHEAD(2)(<AND>/*@bgen(jjtree) #AND( 2) */
                                      {
                                        ASTAND jjtn001 = new ASTAND(JJTAND);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                        jjtn001.jjtSetFirstToken(getToken(1));
                                      }
                                      try {
/*@egen*/ Expression_Aux()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte001;
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          throw (ParseException)jjte001;
                                        }
                                        throw (Error)jjte001;
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtn001.jjtSetLastToken(getToken(0));
                                        }
                                      }
/*@egen*/         |
                                <LESS_THAN>/*@bgen(jjtree) #LESS_THAN( 2) */
                                            {
                                              ASTLESS_THAN jjtn002 = new ASTLESS_THAN(JJTLESS_THAN);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                              jjtn002.jjtSetFirstToken(getToken(1));
                                            }
                                            try {
/*@egen*/ Expression_Aux()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte002;
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                throw (ParseException)jjte002;
                                              }
                                              throw (Error)jjte002;
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                                jjtn002.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/              ))
      ?
}

void Expression_Aux()       : { Token t1; }
{

  (LOOKAHEAD(2)(ExpressionTerminal() |
                <EXCLM_MARK>/*@bgen(jjtree) #EXCLAMATION_MARK( 1) */
                             {
                               ASTEXCLAMATION_MARK jjtn001 = new ASTEXCLAMATION_MARK(JJTEXCLAMATION_MARK);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
                             }
                             try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  1);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/                      |
                <L_PARENTHESIS> Expression() < R_PARENTHESIS > |
                <L_BRACKET> Expression() < R_BRACKET > |
                <PERIOD>/*@bgen(jjtree) #PERIOD( 2) */
                         {
                           ASTPERIOD jjtn002 = new ASTPERIOD(JJTPERIOD);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                           jjtn002.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ Period_Aux()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                             jjtn002.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/            | <NEW>/*@bgen(jjtree) #NEW( 1) */
                                                         {
                                                           ASTNEW jjtn003 = new ASTNEW(JJTNEW);
                                                           boolean jjtc003 = true;
                                                           jjtree.openNodeScope(jjtn003);
                                                           jjtn003.jjtSetFirstToken(getToken(1));
                                                         }
                                                         try {
/*@egen*/ New_Aux()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte003) {
                                                           if (jjtc003) {
                                                             jjtree.clearNodeScope(jjtn003);
                                                             jjtc003 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte003 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte003;
                                                           }
                                                           if (jjte003 instanceof ParseException) {
                                                             throw (ParseException)jjte003;
                                                           }
                                                           throw (Error)jjte003;
                                                         } finally {
                                                           if (jjtc003) {
                                                             jjtree.closeNodeScope(jjtn003,  1);
                                                             jjtn003.jjtSetLastToken(getToken(0));
                                                           }
                                                         }
/*@egen*/        )
       Expression_Aux())
      ?
}

void ExpressionTerminal()       : {/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t1;
  String s1;
}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/

  s1 = IntegerLiteral()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ { jjtn000.node_value = s1; }
  | t1 = <TRUE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ { jjtn000.node_value = t1.image; }
  | t1 = <FALSE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ { jjtn000.node_value = t1.image; }
  | t1 = <ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
              }
/*@egen*/ { jjtn000.node_value = t1.image; }
  | t1 = <THIS>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ { jjtn000.node_value = t1.image; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Period_Aux()            : {/*@bgen(jjtree) PeriodAux */
                                 ASTPeriodAux jjtn000 = new ASTPeriodAux(JJTPERIODAUX);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t1; }
{/*@bgen(jjtree) PeriodAux */
  try {
/*@egen*/

  <LENGTH>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
           }
/*@egen*/ { jjtn000.name = "length"; }
  | t1 = <ID> { jjtn000.name = t1.image; }
  <L_PARENTHESIS> Expression() (<COMMA> Expression())* <R_PARENTHESIS>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void New_Aux()         : {/*@bgen(jjtree) NewAux */
                           ASTNewAux jjtn000 = new ASTNewAux(JJTNEWAUX);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t1; }
{/*@bgen(jjtree) NewAux */
  try {
/*@egen*/

  <INT> { jjtn000.name = "int[]"; }
  <L_BRACKET> Expression()<R_BRACKET> | t1 = <ID> { jjtn000.name = t1.image; }
  <L_PARENTHESIS> <R_PARENTHESIS>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

String IntegerLiteral()       : { Token t1; }
{

  (t1 = <OCTAL> { return t1.image; } | t1 = <INTEGER> {
    return t1.image;
  } | t1 = <HEXA> { return t1.image; } | t1 = <BINARY> { return t1.image; })
}