/* Generated By:JJTree: Do not edit this line. ASTTerm.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package src.AST;

import src.semantic.Symbol;

public class ASTTerm extends SimpleNode {

    protected Symbol.Type var_type = Symbol.Type.VOID;

    public ASTTerm(int id) {
        super(id);
    }

    public ASTTerm(Program p, int id) {
        super(p, id);
    }

    // public boolean checkSymbolTable() {

    // if(!(this.getReturnType().equals(Symbol.Type.VOID) ||
    // this.getReturnType().equals(Symbol.Type.UNDEFINED)))
    // return true;

    // symbols = getNodeSymbolTable();

    // if(!symbols.hasSymbolWithName(this.getNodeValue())){
    // printSemanticError("Variable " + this.getNodeValue() + " has not been
    // declared");
    // return false;
    // }

    // if(!symbols.checkIfInitialized(this.getNodeValue())){
    // printSemanticError("Variable " + this.getNodeValue() + " has not been
    // initialized");
    // return false;
    // }

    // return true;
    // }

    public Symbol.Type getReturnType() {

        switch (this.type) {
        case "int":
            return Symbol.Type.INT;
        case "boolean":
            return Symbol.Type.BOOLEAN;
        case "int[]":
            return Symbol.Type.INT_ARRAY;
        case "id":
            return var_type;
        default:
            return Symbol.Type.UNDEFINED;
        }
    }

    public boolean checkSymbolTable() {

        if (!getReturnType().equals(Symbol.Type.VOID))
            return true;

        // When Term is an identifier different from "this" and the parent is a period
        if (ProgramTreeConstants.jjtNodeName[((SimpleNode) this.jjtGetParent()).getId()].equals("PERIOD") && !this.getType().equals("this"))
            return true;

        if (!symbols.hasSymbolWithName(this.getNodeValue())) {
            printSemanticError("Variable '" + this.getNodeValue() + "' has not been declared");
            return false;
        }

        if (!symbols.checkIfInitialized(this.getNodeValue())) {
            printSemanticError("Variable '" + this.getNodeValue() + "' has not been initialized");
            return false;
        }

        var_type = symbols.getSymbolWithName(this.getNodeValue()).getType();
        return true;
    }

    public Symbol.Type getVarType() {
        return this.var_type;
    }

    // Add Verify table in case of variable (and "this" keyword maybe?)

}
/*
 * JavaCC - OriginalChecksum=89a6ef7c8b00c460ffa31c31fefd6bde (do not edit this
 * line)
 */
