/*******************************************/
/*
void Expression() #void: {} {

    ExpressionFinal() Expression_Aux() | ExpressionOps() 

}

void ExpressionFinal() #Term: {Token t1; String s1;} {

    s1 = IntegerLiteral() {jjtThis.node_value = s1;}
    | t1=<TRUE> {jjtThis.node_value = t1.image;}
    | t1=<FALSE> {jjtThis.node_value = t1.image;}
    | t1=<ID> {jjtThis.node_value = t1.image;}
    | t1=<THIS> {jjtThis.node_value = t1.image;}
    | <EXCLM_MARK> Expression()
    | <L_PARENTHESIS> Expression() <R_PARENTHESIS>
    | <NEW> New_Aux() 
}

void Expression_Aux() #void: {} {

    (
        LOOKAHEAD(2)(
            <PERIOD> Period_Aux()
            | <AND> Expression() #AND(2)
            | <LESS_THAN> Expression() #LESS_THAN(2)
            | <L_BRACKET> Expression() <R_BRACKET>
        ) 
        Expression_Aux()
    )?

}

void ExpressionOps(): {} {
    AddSubAux() AddSub()
}

void AddSub(): {} {
    (LOOKAHEAD(2)(<ADD> | <SUB>) AddSubAux())?
}

void AddSubAux(): {} {
    MulDivAux() MulDiv()
}

void MulDiv(): {} {
    (LOOKAHEAD(2)(<MUL> | <DIV>) MulDivAux())?
}

void MulDivAux(): {} {
    BinOp()
}

void BinOp(): {} {
    (LOOKAHEAD(2)(<AND> | <LESS_THAN>) ExpressionFinal())?
}*/
